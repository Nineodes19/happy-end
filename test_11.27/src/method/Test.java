package method;

/**
 * @program:Test_11.27
 * @author: Nine_odes
 * @description:review
 * @create:2019-11-27 22:20
 */


//
//
// 2.输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。
//
// 3.把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。
// 输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。
// 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。
// NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。
//
// .有10个人围在一起，然后让每个人报数1、2、3直道最后一个每次报数之后让报到“3”的人踢出队伍然后剩下的人重复这个过程。直到人数不足结束。求出最后一个人的初始编号.(第一个人编号0,最后一个编号9)
//
//5.给定一个整数数组 A，如果它是有效的山脉数组就返回 true，否则返回 false。
//
//  让我们回顾一下，如果 A 满足下述条件，那么它是一个山脉数组：
//
//  A.length >= 3
//  在 0 < i < A.length - 1 条件下，存在 i 使得：
//  A[0] < A[1] < ... A[i-1] < A[i]
//  A[i] > A[i+1] > ... > A[B.length - 1]
//         
//
//        示例 1：
//
//        输入：[2,1]
//        输出：false
//        示例 2：
//
//        输入：[3,5,5]
//        输出：false
//        示例 3：
//
//        输入：[0,3,2,1]
//        输出：true
public class Test {
    //1.一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。
    // 求该青蛙跳上一个n级的台阶总共有多少种跳法。

}
